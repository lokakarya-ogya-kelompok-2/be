name: Continuous Deployment

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment'
        required: false
        type: boolean
        default: false

env:
  DEPLOY_PATH: ~/myapp
  COMPOSE_FILE: docker-compose.yml

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub (Optional)
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build Docker Images
      run: |
        docker compose build

    - name: Prepare Deployment
      run: |
        mkdir -p deployment-artifacts
        cp docker-compose.yml Dockerfile deployment-artifacts/

    - name: Deploy to Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_ADDRESS }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Create deployment directory if it doesn't exist
          mkdir -p ${{ env.DEPLOY_PATH }}
          
          # Remove existing deployment artifacts
          rm -rf ${{ env.DEPLOY_PATH }}/*
      
    - name: Copy Deployment Files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_ADDRESS }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        source: "deployment-artifacts/*"
        target: ${{ env.DEPLOY_PATH }}

    - name: Execute Deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_ADDRESS }}
        username: ${{ secrets.SERVER_USERNAME }}
        password: ${{ secrets.SERVER_PASSWORD }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          cd ${{ env.DEPLOY_PATH }}
          
          # Pull latest images
          docker-compose pull
          
          # Stop existing containers
          docker-compose down
          
          # Start new containers
          docker-compose up -d
          
          # Clean up unused docker resources
          docker system prune -af --volumes